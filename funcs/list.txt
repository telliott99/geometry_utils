def init()
def savefig(plt,ofn=None)
def get_path()
def __init__(self,x,y)
def __repr__(self)
def get_random_points(n=3,N=100)
def get_standard_triangle(mode='acute')
def get_point_with_base_angle_length(pL,theta,r)
def get_rectangle_for_line(pL,aspect_ratio=1.0)
def get_point_for_cyclic_quadrilateral(P,pL,m=1.0)
def get_pentagon(O,r)
def scatter_points(ax,pL,c='k',s=POINT_SZ)
def draw_line_segment(ax,pL,ec='k',lw=1,ls='-',alpha=1.0)
def draw_line_segments(ax,pL,ec='k',lw=1,ls='-')
def draw_chained_line_segments(ax,pL,ec='k',lw=1)
def fill_polygon(ax,pL,fc='r',alpha=0.10)
def outline_polygon(ax,pL,ec='red',lw=1)
def getXY(pL)
def get_points_for_XY(X,Y)
def get_deltas(pL)
def get_length(pL)
def points_are_close(A,B)
def get_slope_for_two_points(pL)
def invert_slope(m)
def get_perp_slope(pL)
def get_point_by_fractional_length(pL,f)
def get_point_by_absolute_length(pL,d)
def get_intercept_for_point_slope(A,m)
def get_slope_intercept_for_two_points(pL)
def get_intersection_for_two_slope_intercepts(m1,k1,m2,k2)
def get_intersection_for_two_lines(pL1,pL2)
def get_point_parallel_to_line_for_point(pL,A)
def get_perp_on_line_for_point(pL,A)
def point_is_above_line(A,pL)
def CCW_point_first(pL,rL)
def order_points_by_distance_from_point(pL,point=origin)
def get_perp_at_point_by_fractional_length(pL,f=0.5)
def get_circumcircle(pL)
def get_orthocenter_and_altitudes(pL)
def get_centroid_and_medians(pL)
def get_incenter_and_bisectors(pL)
def get_intersection_slope_intercept_circle(m,k,cL)
def get_intersection_line_segment_circle(pL,cL,mode='left')
def get_intersection_circle_circle(cL1,cL2)
def get_tangent_points_on_circle_for_point(cL1,P)
def get_chord_for_point_on_circle_with_length(cL,P,d)
def find_midpoint_of_arc(pL,cL,major=True)
def get_point_reflected_on_diameter(A,cL)
def get_point_on_circle_at_distance_for_point(cL,d,A)
def get_horizontal_intercept_for_circle_point(cL,A)
def get_vertical_intercept_for_circle_point(cL,A)
def get_angle(A,pL)
def get_all_angles(pL)
def get_points_at_angle_to_line(theta,pL)
def bisect_angle_Euclid(A,pL)
def rotate_one_point(P,theta)
def rotate_point_list(pL,theta)
def rotate_points_around_center_by_angle(pL,Q,theta)
def translate_points(pL,dx=0,dy=0)
def mirror_points(pL,mL,mode='horizontal')
def scale_triangle(pL,f=1.0)
def get_broken_chord_layout(ax)
def get_broken_chord_alternate_layout(ax)
def get_9point_circle(pL)
def get_angle_for_point_on_center(A,Q)
def get_point_at_angle_on_circle(angle, cL)
def arcs_from_indexes(i,j)
def do_slices(L,i,j)
def get_angles_for_center_and_points(Q,A,B)
def fill_sector(ax,Q,r,A,B,fc='r',alpha=1.0)
def write_one_label(P,s,dx=0,dy=0,SZ='none')
def write_labels(L,SZ='none')
def nudge(P,mode='none',f=1.0)
def label_points(points,SZ='none')
def mark_angle(pL,d=5)
def mark_angles(ax,aL,d=5,c='k',s=20)
def mark_angles_open(ax,aL,d=5,c='k',s=20,ws=3)
def mark_right_angle(A,pL,n=3)
def mark_side_at_point(ax,pL,P)
def mark_side_twice(ax,pL)

